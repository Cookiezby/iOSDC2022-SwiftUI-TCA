// Generated by https://quicktype.io

import Foundation

struct Timetable: Codable {
    let timetable: [TimetableElement]
}

struct TimetableElement: Codable, Equatable {
    static func == (lhs: TimetableElement, rhs: TimetableElement) -> Bool {
        lhs.uuid == rhs.uuid
    }
    
    let type: TimetableType
    let uuid: String
    let url: String?
    let title: String
    let abstract: String?
    let accepted: Bool?
    let track: Track?
    let startsAt: String?
    let lengthMin: Int?
    let tags: [Tag]?
    let speaker: Speaker?
    let favCount: Int?
    let feedback: Feedback?
    
    enum CodingKeys: String, CodingKey {
        case type
        case uuid
        case url
        case title
        case abstract
        case accepted
        case track
        case startsAt = "starts_at"
        case lengthMin = "length_min"
        case tags
        case speaker
        case favCount = "fav_count"
        case feedback
    }
}

struct Feedback: Codable {
    let open: Bool
}

struct Speaker: Codable {
    let name, kana: String
    let twitter: String?
    let avatarURL: String?
    
    enum CodingKeys: String, CodingKey {
        case name
        case kana
        case twitter
        case avatarURL = "avatar_url"
    }
}

struct Tag: Codable {
    let name: String
    let colorText: String
    let colorBackground: String
    
    enum CodingKeys: String, CodingKey {
        case name
        case colorText = "color_text"
        case colorBackground = "color_background"
    }
}

struct Track: Codable {
    let name: TrackName
    let sort: Int
}

enum TrackName: String, Codable {
    case trackA = "Track A"
    case trackB = "Track B"
    case trackC = "Track C"
    case trackD = "Track D"
    case trackE = "Track E"
}

enum TimetableType: String, Codable {
    case talk
    case timeslot
}

